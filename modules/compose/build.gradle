plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    alias(libs.plugins.compose.compiler)
}

def isBuildModule = Boolean.valueOf(libs.versions.isBuildModule.get())
if (Boolean.valueOf(isBuildModule)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    namespace "com.bytebitx.compose"
    compileSdk libs.versions.compileSdkVersion.get().toInteger()


    defaultConfig {
        minSdk libs.versions.minSdkVersion.get().toInteger()
        targetSdk libs.versions.targetSdkVersion.get().toInteger()

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true",
                        AROUTER_MODULE_NAME: project.getName()
                ]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
//        useIR = true
    }
    buildFeatures {
        viewBinding true
        compose true
    }

    sourceSets {
        main {
            if (Boolean.valueOf(isBuildModule)) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
    generateStubs = true
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

dependencies {

    implementation project(":common:base")
    implementation project(":common:service")

    // Enforce Compose BOM versions
    implementation platform(libs.compose.bom)
    // For test configurations if you have Compose tests:
    // androidTestImplementation platform(libs.compose.bom)

    // Compose dependencies - versions are now managed by the BOM
    implementation "androidx.compose.material:material" // Or libs.androidx.compose.material if you add alias
    implementation libs.ui                             // Alias from libs.versions.toml
    implementation libs.ui.tooling.preview           // Alias from libs.versions.toml
    implementation libs.ui.tooling                   // Alias from libs.versions.toml
    implementation "androidx.compose.runtime:runtime"      // Or libs.androidx.compose.runtime
    implementation "androidx.compose.runtime:runtime-livedata" // Or libs.androidx.compose.runtime.livedata
    
    // These are not part of the core compose BOM in the same way, keep their versions for now
    // or check for updated versions compatible with Compose BOM 2024.06.00 and Kotlin 2.0.20
    implementation "io.coil-kt:coil-compose:1.3.1" 
    implementation libs.activity.compose // Alias from libs.versions.toml (androidx.activity:activity-compose)
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07" 
    implementation 'androidx.navigation:navigation-compose:2.4.0-alpha06'

    kapt libs.arouter.compiler

    compileOnly libs.hilt
    kapt libs.hilt.compiler
}